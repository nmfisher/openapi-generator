class {{classname}} { 
  {{#vars}}
  {{#description}}/* {{{description}}} */{{/description}}
  {{{dataType}}} {{name}} = {{{defaultValue}}};
  {{#allowableValues}}
  {{#min}} // range from {{min}} to {{max}}{{/min}}//{{^min}}enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}{
  {{/allowableValues}}
  {{/vars}}
  {{classname}}();

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }

  {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#vars}}
    if (json['{{baseName}}'] == null) {
      {{name}} = null;
    } else {
  {{#isDateTime}}
      {{name}} = DateTime.parse(json['{{baseName}}']);
  {{/isDateTime}}
  {{#isDate}}
      {{name}} = DateTime.parse(json['{{baseName}}']);
  {{/isDate}}
  {{^isDateTime}}
  {{^isDate}}
    {{#complexType}}
      {{#allowableValues}}
        {{name}} = {{complexType}}TypeTransformer.decode(json['{{baseName}}']);
      {{/allowableValues}}
      {{^allowableValues}}
        {{#isListContainer}}
          {{#items}}
            {{^isListContainer}}
              {{name}} = {{complexType}}.listFromJson(json['{{baseName}}']);
            {{/isListContainer}}
            {{#isListContainer}}
              {{name}} = json['{{baseName}}'].map((x) => {{complexType}}.listFromJson(x)).cast<{{{dataType}}}>().toList();;
            {{/isListContainer}}
          {{/items}}
        {{/isListContainer}}
        {{#isMapContainer}}
          {{name}} = convert.json.decode(json['{{baseName}}']);
        {{/isMapContainer}}
        {{^isListContainer}}
          {{^isMapContainer}}
            {{name}} = new {{complexType}}.fromJson(json['{{baseName}}']);
          {{/isMapContainer}}
        {{/isListContainer}}
      {{/allowableValues}}      
    {{/complexType}}
    {{^complexType}}
      {{#isListContainer}}
      {{name}} = (json['{{baseName}}'] as List).cast<{{items.datatype}}>();
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{name}} = (json['{{baseName}}'] as Map).cast<String, {{items.datatype}}>();
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{name}} = json['{{baseName}}'];
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}
  {{/isDate}}
  {{/isDateTime}}
    }
  {{/vars}}
  }

  Map<String, dynamic> toJson() {
    return {
    {{#vars}}
      {{#isDateTime}}
        '{{baseName}}': {{name}} == null ? '' : {{name}}.toUtc().toIso8601String(){{^-last}},{{/-last}}
      {{/isDateTime}}
      {{#isDate}}
        '{{baseName}}': {{name}} == null ? '' : {{name}}.toUtc().toIso8601String(){{^-last}},{{/-last}}
      {{/isDate}}
      {{^isDateTime}}
        {{^isDate}}
          {{^isModel}}
            {{^isListContainer}}
              '{{baseName}}': {{name}}{{^-last}},{{/-last}}
            {{/isListContainer}}
            {{#isListContainer}}
              {{#items}}
                {{^isModel}}
                  '{{baseName}}': {{name}}{{^-last}},{{/-last}}
                {{/isModel}}
                {{#isModel}}
                  '{{baseName}}': {{name}}.map((x) => x.toJson()).toList(){{^-last}},{{/-last}}
                {{/isModel}}
              {{/items}}
            {{/isListContainer}}
          {{/isModel}}
          {{#isModel}}
            {{^allowableValues}}
            '{{baseName}}': {{name}}.toJson(){{^-last}},{{/-last}}
            {{/allowableValues}}
            {{#allowableValues}}
            '{{baseName}}': {{name}}.toString(){{^-last}},{{/-last}}
            {{/allowableValues}}
          {{/isModel}}
        {{/isDate}}
      {{/isDateTime}}
    {{/vars}}
    };
  }

  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json == null ? new List<{{classname}}>() : json.map((value) => new {{classname}}.fromJson(value)).toList();
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    var map = new Map<String, {{classname}}>();
    if (json != null && json.length > 0) {
      json.forEach((String key, dynamic value) => map[key] = new {{classname}}.fromJson(value));
    }
    return map;
  }
}
